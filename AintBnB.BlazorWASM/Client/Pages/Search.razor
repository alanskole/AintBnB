@page "/search"
@inject AuthenticationStateProvider AuthenticationStateAsync
@using System.Security.Claims

<h3>Search</h3>

<AuthorizeView>
    <NotAuthorized>
        @if (true) { _navigationManager.NavigateTo("/", true); }
    </NotAuthorized>
    <Authorized>
        @if (_allCustomers != null)
        {
            <p>
                Users: <select @bind="_id">
                    <option></option>
                    @foreach (var cust in _allCustomers)
                    {
                        <option value="@cust.Id">@cust.Id</option>
                    }
                </select>
            </p>
        }
        @if (_countries.Count > 0)
        {
            <p>
                Country: <select @onchange="CountryChangedAsync">
                    <option></option>
                    @foreach (var country in _countries)
                    {
                        <option value="@country">@country</option>
                    }
                </select>
            </p>
            <p>
                City: <select @bind="_city">
                    <option></option>
                    @foreach (var city in _cities)
                    {
                        <option value="@city">@city</option>
                    }
                </select>
            </p>
        }
        Startdate: <input type="date" value="@DateTime.Today.ToString("yyyy-MM-dd")" @onchange="@((e) => DateChanged(DateTime.Parse(e.Value.ToString())))" />

        <p>Nights: <input type="number" @bind="_nights" /></p>

        <button @onclick="@SearchAsync">
            Search
        </button>

        @if (_available != null)
        {
            <br />
            <br />
            <br />
            <button hidden="@_visibilityPriceAsc" @onclick="@VisibilityPriceAscAsync">Price Ascending</button>
            <button hidden="@_visibilityPriceDsc" @onclick="@VisibilityPriceDscAsync">Price Descending</button>
            <button hidden="@_visibilityRatingAsc" @onclick="@VisibilityRatingAscAsync">Rating Ascending</button>
            <button hidden="@_visibilityRatingDsc" @onclick="@VisibilityRatingDscAsync">Rating Descending</button>
            <button hidden="@_visibilitySizeAsc" @onclick="@VisibilitySizeAscAsync">Size Ascending</button>
            <button hidden="@_visibilitySizeDsc" @onclick="@VisibilitySizeDscAsync">Size Descending</button>
            <button hidden="@_visibilityDistanceAsc" @onclick="@VisibilityDistanceAscAsync">Distance Ascending</button>
            <button hidden="@_visibilityDistanceDsc" @onclick="@VisibilityDistanceDscAsync">Distance Descending</button>
            <br />
            <br />
            <br />

            foreach (var acc in _available)
            {
                var link = "./accommodation/" + acc.Id;

                <p>
                    @acc

                    <a href="@link" target="_blank">More info</a>

                    <button @onclick="@(async () => await BookAsync(acc.Id))">
                        Book
                    </button>
                </p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<string> _countries = new List<string>();
    private List<string> _cities = new List<string>();
    private List<User> _allCustomers;
    private string _csrfToken;
    private string _country;
    private string _city;
    private int _id;
    private bool _isAdmin = false;
    private List<Accommodation> _available;
    private int _nights;
    private string _startDate = DateTime.Today.ToString("yyyy-MM-dd");
    private bool _visibilityRatingAsc { get; set; } = false;
    private bool _visibilityRatingDsc { get; set; } = true;
    private bool _visibilitySizeAsc { get; set; } = false;
    private bool _visibilitySizeDsc { get; set; } = true;
    private bool _visibilityPriceAsc { get; set; } = false;
    private bool _visibilityPriceDsc { get; set; } = true;
    private bool _visibilityDistanceAsc { get; set; } = false;
    private bool _visibilityDistanceDsc { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        _csrfToken = await _jSRuntime.InvokeAsync<string>("csrfCookieReader");
        _countries = await _apiCaller.GetAllAsync<string>("world/countries");

        var authstate = await AuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var role = user.FindFirst(ClaimTypes.Role)?.Value;

        if (role.ToUpper().CompareTo("admin".ToUpper()) == 0)
        {
            _isAdmin = true;
            await GetAllCustomersAsync();
        }
        else
            _id = int.Parse(user.Identity.Name);
    }

    private async Task GetAllCustomersAsync()
    {
        try
        {
            _allCustomers = await _apiCaller.GetAllAsync<User>("user/allcustomers");
        }
        catch (Exception ex)
        {
            await _jSRuntime.InvokeAsync<string>("alertMessage", ex.Message);
        }
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        _country = e.Value.ToString();
        try
        {
            _cities = await _apiCaller.GetAllAsync<string>("world/cities/" + _country);
        }
        catch
        {
            _cities = new List<string>();
        }
    }

    private void DateChanged(DateTime newDate)
    {
        _startDate = newDate.ToString("yyyy-MM-dd");
    }

    private async Task SearchAsync()
    {
        try
        {
            _available = await _apiCaller.GetAllAsync<Accommodation>("accommodation/" + _country + "/" + _city + "/" + _startDate + "/" + _nights);
        }
        catch (Exception ex)
        {
            await _jSRuntime.InvokeAsync<string>("alertMessage", ex.Message);
        }
    }

    private async Task BookAsync(int accommodationId)
    {
        try
        {
            await _apiCaller.PostAsync("booking/book", new string[] { _startDate, _id.ToString(), _nights.ToString(), accommodationId.ToString() }, _csrfToken);
            await _jSRuntime.InvokeAsync<string>("alertMessage", "Booked successfully!");
            _navigationManager.NavigateTo("/bookings", true);
        }
        catch (Exception ex)
        {
            await _jSRuntime.InvokeAsync<string>("alertMessage", ex.Message);
        }
    }

    private async Task VisibilityRatingAscAsync()
    {
        _visibilityRatingAsc = !_visibilityRatingAsc;
        _visibilityRatingDsc = !_visibilityRatingDsc;
        await SortAsync("Rating", "Ascending");
    }

    private async Task VisibilityRatingDscAsync()
    {
        _visibilityRatingDsc = !_visibilityRatingDsc;
        _visibilityRatingAsc = !_visibilityRatingAsc;
        await SortAsync("Rating", "Descending");
    }

    private async Task VisibilitySizeAscAsync()
    {
        _visibilitySizeAsc = !_visibilitySizeAsc;
        _visibilitySizeDsc = !_visibilitySizeDsc;
        await SortAsync("Size", "Ascending");
    }

    private async Task VisibilitySizeDscAsync()
    {
        _visibilitySizeDsc = !_visibilitySizeDsc;
        _visibilitySizeAsc = !_visibilitySizeAsc;
        await SortAsync("Size", "Descending");
    }

    private async Task VisibilityPriceAscAsync()
    {
        _visibilityPriceAsc = !_visibilityPriceAsc;
        _visibilityPriceDsc = !_visibilityPriceDsc;
        await SortAsync("Price", "Ascending");
    }

    private async Task VisibilityPriceDscAsync()
    {
        _visibilityPriceDsc = !_visibilityPriceDsc;
        _visibilityPriceAsc = !_visibilityPriceAsc;
        await SortAsync("Price", "Descending");
    }

    private async Task VisibilityDistanceAscAsync()
    {
        _visibilityDistanceAsc = !_visibilityDistanceAsc;
        _visibilityDistanceDsc = !_visibilityDistanceDsc;
        await SortAsync("Distance", "Ascending");
    }

    private async Task VisibilityDistanceDscAsync()
    {
        _visibilityDistanceDsc = !_visibilityDistanceDsc;
        _visibilityDistanceAsc = !_visibilityDistanceAsc;
        await SortAsync("Distance", "Descending");
    }

    private async Task SortAsync(string sortBy, string ascOrDesc)
    {
        try
        {
            _available = await _apiCaller.SortListAsync<Accommodation>("accommodation/sort/" + sortBy + "/" + ascOrDesc, _available);
        }
        catch (Exception ex)
        {
            await _jSRuntime.InvokeAsync<string>("alertMessage", ex.Message);
        }
    }
}
