@page "/changepassword"
@inject AuthenticationStateProvider AuthenticationStateAsync

<h3>Change Password</h3>

<AuthorizeView>
    <NotAuthorized>
        @if (true) { _navigationManager.NavigateTo("/", true); }
    </NotAuthorized>
    <Authorized>
        <p>Current: <input type="password" @bind="_old" /></p>
        <p>New: <input type="password" @bind="_new" /></p>
        <p>Confirm new: <input type="password" @bind="_newConfirmed" /></p>
        <p>
            <button @onclick="@ChangePasswordAsync">
                Change
            </button>
        </p>
    </Authorized>
</AuthorizeView>

@code {
    private string _old;
    private string _new;
    private string _newConfirmed;

    private async Task ChangePasswordAsync()
    {
        var csrfToken = await _jSRuntime.InvokeAsync<string>("csrfCookieReader");
        var authstate = await AuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var id = user.Identity.Name;

        try
        {
            await _apiCaller.PostAsync("user/change/", new string[] { _old, id, _new, _newConfirmed }, csrfToken);
            await _jSRuntime.InvokeAsync<string>("alertMessage", "Password changed successfully!");
            _navigationManager.NavigateTo("/search", true);
        }
        catch (Exception ex)
        {
            await _jSRuntime.InvokeAsync<string>("alertMessage", ex.Message);
        }
    }
}
